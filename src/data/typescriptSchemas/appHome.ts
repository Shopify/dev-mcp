import { z } from "zod";

/**
 * Component definitions for Polaris web components
 * Auto-generated from App Home generated docs data
 * Generated on: 2025-07-15T03:21:08.006Z
 */

export interface ComponentDefinition {
  name: string;
  tagName: string;
  props: Set<string>;
  description?: string;
  category?: string;
}

export const POLARIS_COMPONENTS: Record<string, ComponentDefinition> = {
  "s-badge": {
    name: "Badge",
    tagName: "s-badge",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "color",
      "ctrlKey",
      "data-testid",
      "icon",
      "id",
      "metaKey",
      "shiftKey",
      "size",
      "sourceEvent",
      "style",
      "title",
      "tone",
    ]),
    description:
      "Inform users about the status of an object or indicate that an action has been completed.",
    category: "Titles and text",
  },
  "s-banner": {
    name: "Banner",
    tagName: "s-banner",
    props: new Set([
      "accessibilityLabel",
      "afterhide",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "dismiss",
      "dismissible",
      "heading",
      "hidden",
      "id",
      "metaKey",
      "secondary-actions",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "tone",
    ]),
    description:
      "Highlights important information or required actions prominently within the interface. Use to communicate statuses, provide feedback, or draw attention to critical updates.",
    category: "Feedback",
  },
  "s-box": {
    name: "Box",
    tagName: "s-box",
    props: new Set([
      "accessibilityLabel",
      "accessibilityRole",
      "accessibilityVisibility",
      "aria-label",
      "background",
      "blockSize",
      "border",
      "borderColor",
      "borderRadius",
      "borderStyle",
      "borderWidth",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "display",
      "id",
      "inlineSize",
      "maxBlockSize",
      "maxInlineSize",
      "metaKey",
      "minBlockSize",
      "minInlineSize",
      "overflow",
      "padding",
      "paddingBlock",
      "paddingBlockEnd",
      "paddingBlockStart",
      "paddingInline",
      "paddingInlineEnd",
      "paddingInlineStart",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "A generic container that provides a flexible alternative for custom designs not achievable with existing components. Use it to apply styling such as backgrounds, padding, or borders, or to nest and group other components. The contents of Box always maintain their natural size, making it especially useful within layout components that would otherwise stretch their children.",
    category: "Structure",
  },
  "s-button": {
    name: "Button",
    tagName: "s-button",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "blur",
      "button",
      "class",
      "className",
      "click",
      "command",
      "commandFor",
      "ctrlKey",
      "data-testid",
      "disabled",
      "download",
      "focus",
      "href",
      "icon",
      "id",
      "loading",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "target",
      "title",
      "tone",
      "type",
      "variant",
    ]),
    description:
      "Triggers actions or events, such as submitting forms, opening dialogs, or navigating to other pages. Use Button to let users perform specific tasks or initiate interactions throughout the interface. Buttons can also function as links, guiding users to internal or external destinations.",
    category: "Actions",
  },
  "s-checkbox": {
    name: "Checkbox",
    tagName: "s-checkbox",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "change",
      "checked",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultChecked",
      "defaultIndeterminate",
      "details",
      "disabled",
      "error",
      "id",
      "indeterminate",
      "input",
      "label",
      "metaKey",
      "name",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description:
      "Give users a clear way to make selections, such as agreeing to terms or choosing multiple items from a list.",
    category: "Forms",
  },
  "s-choicelist": {
    name: "ChoiceList",
    tagName: "s-choicelist",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultSelected",
      "details",
      "disabled",
      "error",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "metaKey",
      "multiple",
      "name",
      "selected",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
      "values",
    ]),
    description:
      "Present multiple options to users, allowing either single selections with radio buttons or multiple selections with checkboxes.",
    category: "Forms",
  },
  "s-clickable": {
    name: "Clickable",
    tagName: "s-clickable",
    props: new Set([
      "accessibilityLabel",
      "accessibilityRole",
      "accessibilityVisibility",
      "aria-label",
      "background",
      "blockSize",
      "blur",
      "border",
      "borderColor",
      "borderRadius",
      "borderStyle",
      "borderWidth",
      "button",
      "class",
      "className",
      "click",
      "command",
      "commandFor",
      "ctrlKey",
      "data-testid",
      "disabled",
      "display",
      "download",
      "focus",
      "href",
      "id",
      "inlineSize",
      "loading",
      "maxBlockSize",
      "maxInlineSize",
      "metaKey",
      "minBlockSize",
      "minInlineSize",
      "overflow",
      "padding",
      "paddingBlock",
      "paddingBlockEnd",
      "paddingBlockStart",
      "paddingInline",
      "paddingInlineEnd",
      "paddingInlineStart",
      "shiftKey",
      "sourceEvent",
      "style",
      "target",
      "title",
      "type",
    ]),
    description:
      "A generic interactive container component that provides a flexible alternative for custom interactive elements not achievable with existing components like Button or Link. Use it to apply specific styling such as backgrounds, padding, or borders.",
    category: "Actions",
  },
  "s-datepicker": {
    name: "DatePicker",
    tagName: "s-datepicker",
    props: new Set([
      "accessibilityLabel",
      "allow",
      "allowDays",
      "aria-label",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "defaultView",
      "disallow",
      "disallowDays",
      "focus",
      "id",
      "input",
      "metaKey",
      "name",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "type",
      "value",
      "view",
      "viewchange",
    ]),
    description: "Allow users to select a specific date or date range.",
    category: "Forms",
  },
  "s-divider": {
    name: "Divider",
    tagName: "s-divider",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "color",
      "ctrlKey",
      "data-testid",
      "direction",
      "id",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Create clear visual separation between elements in your user interface.",
    category: "Structure",
  },
  "s-emailfield": {
    name: "EmailField",
    tagName: "s-emailfield",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "maxLength",
      "metaKey",
      "minLength",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description:
      "Let users enter email addresses with built-in validation and optimized keyboard settings.",
    category: "Forms",
  },
  "s-grid": {
    name: "Grid",
    tagName: "s-grid",
    props: new Set([
      "accessibilityLabel",
      "accessibilityRole",
      "accessibilityVisibility",
      "alignContent",
      "alignItems",
      "aria-label",
      "background",
      "blockSize",
      "border",
      "borderColor",
      "borderRadius",
      "borderStyle",
      "borderWidth",
      "button",
      "class",
      "className",
      "columnGap",
      "ctrlKey",
      "data-testid",
      "display",
      "gap",
      "gridColumn",
      "gridRow",
      "gridTemplateColumns",
      "gridTemplateRows",
      "id",
      "inlineSize",
      "justifyContent",
      "justifyItems",
      "maxBlockSize",
      "maxInlineSize",
      "metaKey",
      "minBlockSize",
      "minInlineSize",
      "overflow",
      "padding",
      "paddingBlock",
      "paddingBlockEnd",
      "paddingBlockStart",
      "paddingInline",
      "paddingInlineEnd",
      "paddingInlineStart",
      "placeContent",
      "placeItems",
      "rowGap",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Use `s-grid` to organize your content in a matrix of rows and columns and make responsive layouts for pages. Grid follows the same pattern as the [CSS grid layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout).",
    category: "Structure",
  },
  "s-heading": {
    name: "Heading",
    tagName: "s-heading",
    props: new Set([
      "accessibilityLabel",
      "accessibilityRole",
      "accessibilityVisibility",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "id",
      "lineClamp",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Renders hierarchical titles to communicate the structure and organization of page content. Heading levels adjust automatically based on nesting within parent Section components, ensuring a meaningful and accessible page outline.",
    category: "Titles and text",
  },
  "s-icon": {
    name: "Icon",
    tagName: "s-icon",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "color",
      "ctrlKey",
      "data-testid",
      "id",
      "metaKey",
      "shiftKey",
      "size",
      "sourceEvent",
      "style",
      "title",
      "tone",
      "type",
    ]),
    description:
      "Renders a graphic symbol to visually communicate core parts of the product and available actions. Icons can act as wayfinding tools to help users quickly understand their location within the interface and common interaction patterns.",
    category: "Media",
  },
  "s-image": {
    name: "Image",
    tagName: "s-image",
    props: new Set([
      "accessibilityLabel",
      "accessibilityRole",
      "alt",
      "aria-label",
      "aspectRatio",
      "border",
      "borderColor",
      "borderRadius",
      "borderStyle",
      "borderWidth",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "error",
      "id",
      "inlineSize",
      "load",
      "loading",
      "metaKey",
      "objectFit",
      "shiftKey",
      "sizes",
      "sourceEvent",
      "src",
      "srcSet",
      "style",
      "title",
    ]),
    description:
      "Embeds an image within the interface and controls its presentation. Use to visually illustrate concepts, showcase products, or support user tasks and interactions.",
    category: "Media",
  },
  "s-link": {
    name: "Link",
    tagName: "s-link",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "click",
      "command",
      "commandFor",
      "ctrlKey",
      "data-testid",
      "download",
      "href",
      "id",
      "lang",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "target",
      "title",
      "tone",
    ]),
    description:
      "Makes text interactive, allowing users to navigate to other pages or perform specific actions. Supports standard URLs, custom protocols, and navigation within Shopify or app pages.",
    category: "Actions",
  },
  "s-moneyfield": {
    name: "MoneyField",
    tagName: "s-moneyfield",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "currencyCode",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "max",
      "metaKey",
      "min",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "step",
      "style",
      "title",
      "value",
    ]),
    description:
      "Collect monetary values from users with built-in currency formatting and validation.",
    category: "Forms",
  },
  "s-numberfield": {
    name: "NumberField",
    tagName: "s-numberfield",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "inputMode",
      "label",
      "labelAccessibilityVisibility",
      "max",
      "metaKey",
      "min",
      "name",
      "placeholder",
      "prefix",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "step",
      "style",
      "suffix",
      "title",
      "value",
    ]),
    description:
      "Collect numerical values from users with optimized keyboard settings and built-in validation.",
    category: "Forms",
  },
  "s-orderedlist": {
    name: "OrderedList",
    tagName: "s-orderedlist",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "id",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Displays a numbered list of related items in a specific sequence. Use to present step-by-step instructions, ranked items, or procedures where order matters.",
    category: "Structure",
  },
  "s-page": {
    name: "Page",
    tagName: "s-page",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "aside",
      "button",
      "class",
      "className",
      "connectedCallback",
      "ctrlKey",
      "data-testid",
      "disconnectedCallback",
      "id",
      "inlineSize",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      " Use `s-page` as the main container for placing content in your app. Page comes with preset layouts and automatically adds spacing between elements.",
    category: "Structure",
  },
  "s-paragraph": {
    name: "Paragraph",
    tagName: "s-paragraph",
    props: new Set([
      "accessibilityLabel",
      "accessibilityVisibility",
      "aria-label",
      "button",
      "class",
      "className",
      "color",
      "ctrlKey",
      "data-testid",
      "dir",
      "fontVariantNumeric",
      "id",
      "lineClamp",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "tone",
    ]),
    description:
      "Displays a block of text, and can contain inline elements such as buttons, links, or emphasized text. Use to present standalone blocks of content, as opposed to inline text.",
    category: "Titles and text",
  },
  "s-passwordfield": {
    name: "PasswordField",
    tagName: "s-passwordfield",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "maxLength",
      "metaKey",
      "minLength",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description: "Securely collect sensitive information from users.",
    category: "Forms",
  },
  "s-querycontainer": {
    name: "QueryContainer",
    tagName: "s-querycontainer",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "containerName",
      "ctrlKey",
      "data-testid",
      "id",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Establishes a query container for responsive design. Use `s-query-container` to define an element as a containment context, enabling child components or styles to adapt based on the container’s size.",
    category: "Structure",
  },
  "s-searchfield": {
    name: "SearchField",
    tagName: "s-searchfield",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "maxLength",
      "metaKey",
      "minLength",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description:
      "Let users enter search terms or find specific items using a single-line input field.",
    category: "Forms",
  },
  "s-section": {
    name: "Section",
    tagName: "s-section",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "heading",
      "id",
      "metaKey",
      "padding",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Groups related content into clearly-defined thematic areas. Sections have contextual styling that automatically adapts based on nesting depth. They also adjust heading levels to maintain a meaningful and accessible page structure.",
    category: "Structure",
  },
  "s-select": {
    name: "Select",
    tagName: "s-select",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "details",
      "disabled",
      "disconnectedCallback",
      "error",
      "icon",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "metaKey",
      "name",
      "placeholder",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description:
      "Allow users to pick one option from a menu. Ideal when presenting four or more choices to keep interfaces uncluttered.",
    category: "Forms",
  },
  "s-spinner": {
    name: "Spinner",
    tagName: "s-spinner",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "id",
      "metaKey",
      "shiftKey",
      "size",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Displays an animated indicator showing users that content or actions are loading. Use to communicate ongoing processes, such as fetching data from a server. For loading states on buttons, use the “loading” property on the Button component instead.",
    category: "Feedback",
  },
  "s-stack": {
    name: "Stack",
    tagName: "s-stack",
    props: new Set([
      "accessibilityLabel",
      "accessibilityRole",
      "accessibilityVisibility",
      "alignContent",
      "alignItems",
      "aria-label",
      "background",
      "blockSize",
      "border",
      "borderColor",
      "borderRadius",
      "borderStyle",
      "borderWidth",
      "button",
      "class",
      "className",
      "columnGap",
      "ctrlKey",
      "data-testid",
      "direction",
      "display",
      "gap",
      "id",
      "inlineSize",
      "justifyContent",
      "maxBlockSize",
      "maxInlineSize",
      "metaKey",
      "minBlockSize",
      "minInlineSize",
      "overflow",
      "padding",
      "paddingBlock",
      "paddingBlockEnd",
      "paddingBlockStart",
      "paddingInline",
      "paddingInlineEnd",
      "paddingInlineStart",
      "rowGap",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Organizes elements horizontally or vertically along the block or inline axis. Use to structure layouts, group related components, or control spacing between elements.",
    category: "Structure",
  },
  "s-switch": {
    name: "Switch",
    tagName: "s-switch",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "change",
      "checked",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultChecked",
      "details",
      "disabled",
      "error",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "metaKey",
      "name",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description: "Give users a clear way to toggle options on or off.",
    category: "Forms",
  },
  "s-table": {
    name: "Table",
    tagName: "s-table",
    props: new Set([
      "accessibilityLabel",
      "addEventListener",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "disconnectedCallback",
      "dispatchEvent",
      "filters",
      "hasNextPage",
      "hasPreviousPage",
      "id",
      "listSlot",
      "loading",
      "metaKey",
      "nextpage",
      "paginate",
      "previouspage",
      "removeEventListener",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
      "variant",
    ]),
    description:
      "Display data clearly in rows and columns, helping users view, analyze, and compare information. Automatically renders as a list on small screens and a table on large ones.",
    category: "Structure",
  },
  "s-text": {
    name: "Text",
    tagName: "s-text",
    props: new Set([
      "accessibilityLabel",
      "accessibilityVisibility",
      "aria-label",
      "button",
      "class",
      "className",
      "color",
      "ctrlKey",
      "data-testid",
      "dir",
      "fontVariantNumeric",
      "id",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "tone",
      "type",
    ]),
    description:
      "Displays inline text with specific visual styles or tones. Use to emphasize or differentiate words or phrases within a Paragraph or other block-level components.",
    category: "Titles and text",
  },
  "s-textarea": {
    name: "TextArea",
    tagName: "s-textarea",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "maxLength",
      "metaKey",
      "minLength",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "rows",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description:
      "Collect longer text content from users with a multi-line input that expands automatically.",
    category: "Forms",
  },
  "s-textfield": {
    name: "TextField",
    tagName: "s-textfield",
    props: new Set([
      "accessibilityLabel",
      "accessory",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "icon",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "maxLength",
      "metaKey",
      "minLength",
      "name",
      "placeholder",
      "prefix",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "suffix",
      "title",
      "value",
    ]),
    description:
      "Lets users enter or edit text within a single-line input. Use to collect short, free-form information from users.",
    category: "Forms",
  },
  "s-unorderedlist": {
    name: "UnorderedList",
    tagName: "s-unorderedlist",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "button",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "id",
      "metaKey",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
    ]),
    description:
      "Displays a bulleted list of related items. Use to present collections of items or options where the sequence isn’t critical.",
    category: "Structure",
  },
  "s-urlfield": {
    name: "URLField",
    tagName: "s-urlfield",
    props: new Set([
      "accessibilityLabel",
      "aria-label",
      "autocomplete",
      "blur",
      "button",
      "change",
      "class",
      "className",
      "ctrlKey",
      "data-testid",
      "defaultValue",
      "details",
      "disabled",
      "error",
      "focus",
      "id",
      "input",
      "label",
      "labelAccessibilityVisibility",
      "maxLength",
      "metaKey",
      "minLength",
      "name",
      "placeholder",
      "readOnly",
      "required",
      "shiftKey",
      "sourceEvent",
      "style",
      "title",
      "value",
    ]),
    description:
      "Collect URLs from users with built-in formatting and validation.",
    category: "Forms",
  },
};

/**
 * Gets the Polaris components as a Map
 */
export function getPolarisComponents(): Map<string, ComponentDefinition> {
  const components = new Map<string, ComponentDefinition>();
  for (const [tagName, componentInfo] of Object.entries(POLARIS_COMPONENTS)) {
    components.set(tagName, componentInfo);
  }
  return components;
}

/**
 * Gets the list of all Polaris component tag names
 */
export function getPolarisComponentNames(): string[] {
  return Object.keys(POLARIS_COMPONENTS);
}

/**
 * Gets a specific component definition by tag name
 */
export function getPolarisComponent(
  tagName: string,
): ComponentDefinition | undefined {
  return POLARIS_COMPONENTS[tagName];
}

/**
 * Checks if a tag name is a valid Polaris component
 */
export function isPolarisComponent(tagName: string): boolean {
  return tagName in POLARIS_COMPONENTS;
}

// Zod schemas for runtime validation

// Badge - Inform users about the status of an object or indicate that an action has been completed.
export const BadgeSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  color: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  icon: z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  size: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
});

export type BadgeProps = z.infer<typeof BadgeSchema>;

// Banner - Highlights important information or required actions prominently within the interface. Use to communicate statuses, provide feedback, or draw attention to critical updates.
export const BannerSchema = z.object({
  accessibilityLabel: z.string().optional(),
  afterhide: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  dismiss: z.string().optional(),
  dismissible: z.string().optional(),
  heading: z.string().optional(),
  hidden: z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  "secondary-actions": z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
});

export type BannerProps = z.infer<typeof BannerSchema>;

// Box - A generic container that provides a flexible alternative for custom designs not achievable with existing components. Use it to apply styling such as backgrounds, padding, or borders, or to nest and group other components. The contents of Box always maintain their natural size, making it especially useful within layout components that would otherwise stretch their children.
export const BoxSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityRole: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  "aria-label": z.string().optional(),
  background: z.string().optional(),
  blockSize: z.string().optional(),
  border: z.string().optional(),
  borderColor: z.string().optional(),
  borderRadius: z.string().optional(),
  borderStyle: z.string().optional(),
  borderWidth: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  display: z.string().optional(),
  id: z.string().optional(),
  inlineSize: z.string().optional(),
  maxBlockSize: z.string().optional(),
  maxInlineSize: z.string().optional(),
  metaKey: z.string().optional(),
  minBlockSize: z.string().optional(),
  minInlineSize: z.string().optional(),
  overflow: z.string().optional(),
  padding: z.string().optional(),
  paddingBlock: z.string().optional(),
  paddingBlockEnd: z.string().optional(),
  paddingBlockStart: z.string().optional(),
  paddingInline: z.string().optional(),
  paddingInlineEnd: z.string().optional(),
  paddingInlineStart: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type BoxProps = z.infer<typeof BoxSchema>;

// Button - Triggers actions or events, such as submitting forms, opening dialogs, or navigating to other pages. Use Button to let users perform specific tasks or initiate interactions throughout the interface. Buttons can also function as links, guiding users to internal or external destinations.
export const ButtonSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  click: z.string().optional(),
  command: z.string().optional(),
  commandFor: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  disabled: z.string().optional(),
  download: z.string().optional(),
  focus: z.string().optional(),
  href: z.string().optional(),
  icon: z.string().optional(),
  id: z.string().optional(),
  loading: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  target: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
  type: z.string().optional(),
  variant: z.string().optional(),
});

export type ButtonProps = z.infer<typeof ButtonSchema>;

// Checkbox - Give users a clear way to make selections, such as agreeing to terms or choosing multiple items from a list.
export const CheckboxSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  checked: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultChecked: z.string().optional(),
  defaultIndeterminate: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  id: z.string().optional(),
  indeterminate: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  metaKey: z.string().optional(),
  name: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type CheckboxProps = z.infer<typeof CheckboxSchema>;

// ChoiceList - Present multiple options to users, allowing either single selections with radio buttons or multiple selections with checkboxes.
export const ChoiceListSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultSelected: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  metaKey: z.string().optional(),
  multiple: z.string().optional(),
  name: z.string().optional(),
  selected: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
  values: z.string().optional(),
});

export type ChoiceListProps = z.infer<typeof ChoiceListSchema>;

// Clickable - A generic interactive container component that provides a flexible alternative for custom interactive elements not achievable with existing components like Button or Link. Use it to apply specific styling such as backgrounds, padding, or borders.
export const ClickableSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityRole: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  "aria-label": z.string().optional(),
  background: z.string().optional(),
  blockSize: z.string().optional(),
  blur: z.string().optional(),
  border: z.string().optional(),
  borderColor: z.string().optional(),
  borderRadius: z.string().optional(),
  borderStyle: z.string().optional(),
  borderWidth: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  click: z.string().optional(),
  command: z.string().optional(),
  commandFor: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  disabled: z.string().optional(),
  display: z.string().optional(),
  download: z.string().optional(),
  focus: z.string().optional(),
  href: z.string().optional(),
  id: z.string().optional(),
  inlineSize: z.string().optional(),
  loading: z.string().optional(),
  maxBlockSize: z.string().optional(),
  maxInlineSize: z.string().optional(),
  metaKey: z.string().optional(),
  minBlockSize: z.string().optional(),
  minInlineSize: z.string().optional(),
  overflow: z.string().optional(),
  padding: z.string().optional(),
  paddingBlock: z.string().optional(),
  paddingBlockEnd: z.string().optional(),
  paddingBlockStart: z.string().optional(),
  paddingInline: z.string().optional(),
  paddingInlineEnd: z.string().optional(),
  paddingInlineStart: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  target: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
});

export type ClickableProps = z.infer<typeof ClickableSchema>;

// DatePicker - Allow users to select a specific date or date range.
export const DatePickerSchema = z.object({
  accessibilityLabel: z.string().optional(),
  allow: z.string().optional(),
  allowDays: z.string().optional(),
  "aria-label": z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  defaultView: z.string().optional(),
  disallow: z.string().optional(),
  disallowDays: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  metaKey: z.string().optional(),
  name: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
  value: z.string().optional(),
  view: z.string().optional(),
  viewchange: z.string().optional(),
});

export type DatePickerProps = z.infer<typeof DatePickerSchema>;

// Divider - Create clear visual separation between elements in your user interface.
export const DividerSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  color: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  direction: z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type DividerProps = z.infer<typeof DividerSchema>;

// EmailField - Let users enter email addresses with built-in validation and optimized keyboard settings.
export const EmailFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  maxLength: z.string().optional(),
  metaKey: z.string().optional(),
  minLength: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type EmailFieldProps = z.infer<typeof EmailFieldSchema>;

// Grid - Use `s-grid` to organize your content in a matrix of rows and columns and make responsive layouts for pages. Grid follows the same pattern as the [CSS grid layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout).
export const GridSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityRole: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  alignContent: z.string().optional(),
  alignItems: z.string().optional(),
  "aria-label": z.string().optional(),
  background: z.string().optional(),
  blockSize: z.string().optional(),
  border: z.string().optional(),
  borderColor: z.string().optional(),
  borderRadius: z.string().optional(),
  borderStyle: z.string().optional(),
  borderWidth: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  columnGap: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  display: z.string().optional(),
  gap: z.string().optional(),
  gridColumn: z.string().optional(),
  gridRow: z.string().optional(),
  gridTemplateColumns: z.string().optional(),
  gridTemplateRows: z.string().optional(),
  id: z.string().optional(),
  inlineSize: z.string().optional(),
  justifyContent: z.string().optional(),
  justifyItems: z.string().optional(),
  maxBlockSize: z.string().optional(),
  maxInlineSize: z.string().optional(),
  metaKey: z.string().optional(),
  minBlockSize: z.string().optional(),
  minInlineSize: z.string().optional(),
  overflow: z.string().optional(),
  padding: z.string().optional(),
  paddingBlock: z.string().optional(),
  paddingBlockEnd: z.string().optional(),
  paddingBlockStart: z.string().optional(),
  paddingInline: z.string().optional(),
  paddingInlineEnd: z.string().optional(),
  paddingInlineStart: z.string().optional(),
  placeContent: z.string().optional(),
  placeItems: z.string().optional(),
  rowGap: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type GridProps = z.infer<typeof GridSchema>;

// Heading - Renders hierarchical titles to communicate the structure and organization of page content. Heading levels adjust automatically based on nesting within parent Section components, ensuring a meaningful and accessible page outline.
export const HeadingSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityRole: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  id: z.string().optional(),
  lineClamp: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type HeadingProps = z.infer<typeof HeadingSchema>;

// Icon - Renders a graphic symbol to visually communicate core parts of the product and available actions. Icons can act as wayfinding tools to help users quickly understand their location within the interface and common interaction patterns.
export const IconSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  color: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  size: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
  type: z.string().optional(),
});

export type IconProps = z.infer<typeof IconSchema>;

// Image - Embeds an image within the interface and controls its presentation. Use to visually illustrate concepts, showcase products, or support user tasks and interactions.
export const ImageSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityRole: z.string().optional(),
  alt: z.string().optional(),
  "aria-label": z.string().optional(),
  aspectRatio: z.string().optional(),
  border: z.string().optional(),
  borderColor: z.string().optional(),
  borderRadius: z.string().optional(),
  borderStyle: z.string().optional(),
  borderWidth: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  error: z.string().optional(),
  id: z.string().optional(),
  inlineSize: z.string().optional(),
  load: z.string().optional(),
  loading: z.string().optional(),
  metaKey: z.string().optional(),
  objectFit: z.string().optional(),
  shiftKey: z.string().optional(),
  sizes: z.string().optional(),
  sourceEvent: z.string().optional(),
  src: z.string().optional(),
  srcSet: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type ImageProps = z.infer<typeof ImageSchema>;

// Link - Makes text interactive, allowing users to navigate to other pages or perform specific actions. Supports standard URLs, custom protocols, and navigation within Shopify or app pages.
export const LinkSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  click: z.string().optional(),
  command: z.string().optional(),
  commandFor: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  download: z.string().optional(),
  href: z.string().optional(),
  id: z.string().optional(),
  lang: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  target: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
});

export type LinkProps = z.infer<typeof LinkSchema>;

// MoneyField - Collect monetary values from users with built-in currency formatting and validation.
export const MoneyFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  currencyCode: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  max: z.string().optional(),
  metaKey: z.string().optional(),
  min: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  step: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type MoneyFieldProps = z.infer<typeof MoneyFieldSchema>;

// NumberField - Collect numerical values from users with optimized keyboard settings and built-in validation.
export const NumberFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  inputMode: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  max: z.string().optional(),
  metaKey: z.string().optional(),
  min: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  prefix: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  step: z.string().optional(),
  style: z.string().optional(),
  suffix: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type NumberFieldProps = z.infer<typeof NumberFieldSchema>;

// OrderedList - Displays a numbered list of related items in a specific sequence. Use to present step-by-step instructions, ranked items, or procedures where order matters.
export const OrderedListSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type OrderedListProps = z.infer<typeof OrderedListSchema>;

// Page -  Use `s-page` as the main container for placing content in your app. Page comes with preset layouts and automatically adds spacing between elements.
export const PageSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  aside: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  connectedCallback: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  disconnectedCallback: z.string().optional(),
  id: z.string().optional(),
  inlineSize: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type PageProps = z.infer<typeof PageSchema>;

// Paragraph - Displays a block of text, and can contain inline elements such as buttons, links, or emphasized text. Use to present standalone blocks of content, as opposed to inline text.
export const ParagraphSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  color: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  dir: z.string().optional(),
  fontVariantNumeric: z.string().optional(),
  id: z.string().optional(),
  lineClamp: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
});

export type ParagraphProps = z.infer<typeof ParagraphSchema>;

// PasswordField - Securely collect sensitive information from users.
export const PasswordFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  maxLength: z.string().optional(),
  metaKey: z.string().optional(),
  minLength: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type PasswordFieldProps = z.infer<typeof PasswordFieldSchema>;

// QueryContainer - Establishes a query container for responsive design. Use `s-query-container` to define an element as a containment context, enabling child components or styles to adapt based on the container’s size.
export const QueryContainerSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  containerName: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type QueryContainerProps = z.infer<typeof QueryContainerSchema>;

// SearchField - Let users enter search terms or find specific items using a single-line input field.
export const SearchFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  maxLength: z.string().optional(),
  metaKey: z.string().optional(),
  minLength: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type SearchFieldProps = z.infer<typeof SearchFieldSchema>;

// Section - Groups related content into clearly-defined thematic areas. Sections have contextual styling that automatically adapts based on nesting depth. They also adjust heading levels to maintain a meaningful and accessible page structure.
export const SectionSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  heading: z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  padding: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type SectionProps = z.infer<typeof SectionSchema>;

// Select - Allow users to pick one option from a menu. Ideal when presenting four or more choices to keep interfaces uncluttered.
export const SelectSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  disconnectedCallback: z.string().optional(),
  error: z.string().optional(),
  icon: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  metaKey: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type SelectProps = z.infer<typeof SelectSchema>;

// Spinner - Displays an animated indicator showing users that content or actions are loading. Use to communicate ongoing processes, such as fetching data from a server. For loading states on buttons, use the “loading” property on the Button component instead.
export const SpinnerSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  size: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type SpinnerProps = z.infer<typeof SpinnerSchema>;

// Stack - Organizes elements horizontally or vertically along the block or inline axis. Use to structure layouts, group related components, or control spacing between elements.
export const StackSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityRole: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  alignContent: z.string().optional(),
  alignItems: z.string().optional(),
  "aria-label": z.string().optional(),
  background: z.string().optional(),
  blockSize: z.string().optional(),
  border: z.string().optional(),
  borderColor: z.string().optional(),
  borderRadius: z.string().optional(),
  borderStyle: z.string().optional(),
  borderWidth: z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  columnGap: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  direction: z.string().optional(),
  display: z.string().optional(),
  gap: z.string().optional(),
  id: z.string().optional(),
  inlineSize: z.string().optional(),
  justifyContent: z.string().optional(),
  maxBlockSize: z.string().optional(),
  maxInlineSize: z.string().optional(),
  metaKey: z.string().optional(),
  minBlockSize: z.string().optional(),
  minInlineSize: z.string().optional(),
  overflow: z.string().optional(),
  padding: z.string().optional(),
  paddingBlock: z.string().optional(),
  paddingBlockEnd: z.string().optional(),
  paddingBlockStart: z.string().optional(),
  paddingInline: z.string().optional(),
  paddingInlineEnd: z.string().optional(),
  paddingInlineStart: z.string().optional(),
  rowGap: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type StackProps = z.infer<typeof StackSchema>;

// Switch - Give users a clear way to toggle options on or off.
export const SwitchSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  checked: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultChecked: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  metaKey: z.string().optional(),
  name: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type SwitchProps = z.infer<typeof SwitchSchema>;

// Table - Display data clearly in rows and columns, helping users view, analyze, and compare information. Automatically renders as a list on small screens and a table on large ones.
export const TableSchema = z.object({
  accessibilityLabel: z.string().optional(),
  addEventListener: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  disconnectedCallback: z.string().optional(),
  dispatchEvent: z.string().optional(),
  filters: z.string().optional(),
  hasNextPage: z.string().optional(),
  hasPreviousPage: z.string().optional(),
  id: z.string().optional(),
  listSlot: z.string().optional(),
  loading: z.string().optional(),
  metaKey: z.string().optional(),
  nextpage: z.string().optional(),
  paginate: z.string().optional(),
  previouspage: z.string().optional(),
  removeEventListener: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
  variant: z.string().optional(),
});

export type TableProps = z.infer<typeof TableSchema>;

// Text - Displays inline text with specific visual styles or tones. Use to emphasize or differentiate words or phrases within a Paragraph or other block-level components.
export const TextSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessibilityVisibility: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  color: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  dir: z.string().optional(),
  fontVariantNumeric: z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  tone: z.string().optional(),
  type: z.string().optional(),
});

export type TextProps = z.infer<typeof TextSchema>;

// TextArea - Collect longer text content from users with a multi-line input that expands automatically.
export const TextAreaSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  maxLength: z.string().optional(),
  metaKey: z.string().optional(),
  minLength: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  rows: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type TextAreaProps = z.infer<typeof TextAreaSchema>;

// TextField - Lets users enter or edit text within a single-line input. Use to collect short, free-form information from users.
export const TextFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  accessory: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  icon: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  maxLength: z.string().optional(),
  metaKey: z.string().optional(),
  minLength: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  prefix: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  suffix: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type TextFieldProps = z.infer<typeof TextFieldSchema>;

// UnorderedList - Displays a bulleted list of related items. Use to present collections of items or options where the sequence isn’t critical.
export const UnorderedListSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  button: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  id: z.string().optional(),
  metaKey: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
});

export type UnorderedListProps = z.infer<typeof UnorderedListSchema>;

// URLField - Collect URLs from users with built-in formatting and validation.
export const URLFieldSchema = z.object({
  accessibilityLabel: z.string().optional(),
  "aria-label": z.string().optional(),
  autocomplete: z.string().optional(),
  blur: z.string().optional(),
  button: z.string().optional(),
  change: z.string().optional(),
  class: z.string().optional(),
  className: z.string().optional(),
  ctrlKey: z.string().optional(),
  "data-testid": z.string().optional(),
  defaultValue: z.string().optional(),
  details: z.string().optional(),
  disabled: z.string().optional(),
  error: z.string().optional(),
  focus: z.string().optional(),
  id: z.string().optional(),
  input: z.string().optional(),
  label: z.string().optional(),
  labelAccessibilityVisibility: z.string().optional(),
  maxLength: z.string().optional(),
  metaKey: z.string().optional(),
  minLength: z.string().optional(),
  name: z.string().optional(),
  placeholder: z.string().optional(),
  readOnly: z.string().optional(),
  required: z.string().optional(),
  shiftKey: z.string().optional(),
  sourceEvent: z.string().optional(),
  style: z.string().optional(),
  title: z.string().optional(),
  value: z.string().optional(),
});

export type URLFieldProps = z.infer<typeof URLFieldSchema>;
